name: "c3d_ucf101"

# ----- video/label input -----
# ----- for training
layer {
  name: "data"
  type: "HDF5Data"
  top: "data_1"
  top: "sim"
  #mean_file: "ucf101_train_mean.binaryproto"
  hdf5_data_param {
    source: "train_list.txt"
    batch_size: 1
    #new_height: 128
    #new_width: 171
    #new_length: 16
#    shuffle: true
  }
  include {
    phase: TRAIN
  }
#  transform_param {
 #   crop_size: 112
 #   mirror: true
 # }
}
# ----- for validation
#layer {
#  name: "data"
#  type: "VideoData"
#  top: "data"
#  top: "label"
#  video_data_param {
#    source: "ucf_siamiese_test1.txt"
#    batch_size: 5
#    new_height: 128
#    new_width: 171
#    new_length: 16
#    shuffle: true
#  }
#  include {
#    phase: TEST
#    stage: "test-on-train"
#  }
#  transform_param {
#    crop_size: 112
#    mirror: false
#    mean_file: "ucf101_train_mean.binaryproto"
#  }
#}
layer {
  name: "data"
  type: "HDF5Data"
  top: "data_1"
  top: "sim"
  hdf5_data_param {
    source: "test_list.txt"
    batch_size: 1
    #new_height: 128
    #new_width: 171
    #new_length: 16
    #shuffle: true
#    mean_file: "ucf101_train_mean.binaryproto"
  }
  include {
    phase: TEST
  #  stage: "test-on-val"
  }
#  transform_param {
#    crop_size: 112
#    mirror: false
#  }
}



# ----- 1st group -----
layer {
  name: "conv1a"
  type: "Convolution"
  bottom: "data_1"
  top: "conv1a"
  param {
    lr_mult: 1
    decay_mult: 1
  } 
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine:CAFFE
  }
}
layer {
  name: "relu1a"
  type: "ReLU"
  bottom: "conv1a"
  top: "conv1a"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1a"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size:1
    stride:1
  }
}

# ----- 2nd group -----
layer {
  name: "conv2a"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2a"
  type: "ReLU"
  bottom: "conv2a"
  top: "conv2a"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2a"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
  }
}

# ----- 3rd group -----
layer {
  name: "conv3a"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu3a"
  type: "ReLU"
  bottom: "conv3a"
  top: "conv3a"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3a"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
  }
}

# ----- 4th group -----
layer {
  name: "conv4a"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4a"
  type: "ReLU"
  bottom: "conv4a"
  top: "conv4a"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4a"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
  }
}

# ----- 5th group -----
layer {
  name: "conv5a"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5a"
  type: "ReLU"
  bottom: "conv5a"
  top: "conv5a"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5a"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
  }
}

# ----- 1st fc group -----
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}


# ----- siamese part 2 -----
# ----- 1st group -----

layer {
  name: "data_p"
  type: "HDF5Data"
  top: "data_2"
  top: "label"
  hdf5_data_param {
    source: "train_list.txt"
    batch_size: 1
    #new_height: 128
    #new_width: 171
    #new_length: 16
    #shuffle: true
  #  mean_file: "ucf101_train_mean.binaryproto"
  }
  include {
    phase: TRAIN
  }
 # transform_param {
 #   crop_size: 112
 #   mirror: true
 # }
}
# ----- for validation
#layer {
#  name: "data_p"
#  type: "VideoData"
#  top: "data_p"
#  top: "sim"
#  video_data_param {
#    source: "ucf_siamiese_test2.txt"
#    batch_size: 5
#    new_height: 128
#    new_width: 171
#    new_length: 16
#    shuffle: true
#  }
#  include {
#    phase: TEST
#    stage: "test-on-train"
#  }
#  transform_param {
#    crop_size: 112
#    mirror: false
#    mean_file: "ucf101_train_mean.binaryproto"
#  }
#}
layer {
  name: "data_p"
  type: "HDF5Data"
  top: "data_2"
  top: "label"
  hdf5_data_param {
    source: "test_list.txt"
    batch_size: 1
 #   new_height: 128
 #   new_width: 171
 #   new_length: 16
    #shuffle: true
   # mean_file: "ucf101_train_mean.binaryproto"
  }
  include {
    phase: TEST
   # stage: "test-on-val"
  }
  #transform_param {
  #  crop_size: 112
  #  mirror: false
  #}
}
layer {
  name: "conv1a_p"
  type: "Convolution"
  bottom: "data_2"
  top: "conv1a_p"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine:CAFFE
  }
}
layer {
  name: "relu1a_p"
  type: "ReLU"
  bottom: "conv1a_p"
  top: "conv1a_p"
}
layer {
  name: "pool1_p"
  type: "Pooling"
  bottom: "conv1a_p"
  top: "pool1_p"
  pooling_param {
    pool: MAX
    kernel_size:1
    stride:1
  }
}

# ----- 2nd group -----
layer {
  name: "conv2a_p"
  type: "Convolution"
  bottom: "pool1_p"
  top: "conv2a_p"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2a_p"
  type: "ReLU"
  bottom: "conv2a_p"
  top: "conv2a_p"
}
layer {
  name: "pool2_p"
  type: "Pooling"
  bottom: "conv2a_p"
  top: "pool2_p"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
}
}
# ----- 3rd group -----
layer {
  name: "conv3a_p"
  type: "Convolution"
  bottom: "pool2_p"
  top: "conv3a_p"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu3a_p"
  type: "ReLU"
  bottom: "conv3a_p"
  top: "conv3a_p"
}
layer {
  name: "pool3_p"
  type: "Pooling"
  bottom: "conv3a_p"
  top: "pool3_p"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
  }
}

# ----- 4th group -----
layer {
  name: "conv4a_p"
  type: "Convolution"
  bottom: "pool3_p"
  top: "conv4a_p"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4a_p"
  type: "ReLU"
  bottom: "conv4a_p"
  top: "conv4a_p"
}
layer {
  name: "pool4_p"
  type: "Pooling"
  bottom: "conv4a_p"
  top: "pool4_p"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
  }
}

# ----- 5th group -----
layer {
  name: "conv5a_p"
  type: "Convolution"
  bottom: "pool4_p"
  top: "conv5a_p"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    axis: 1
    kernel_size: 3 
    stride: 1
    pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5a_p"
  type: "ReLU"
  bottom: "conv5a_p"
  top: "conv5a_p"
}
layer {
  name: "pool5_p"
  type: "Pooling"
  bottom: "conv5a_p"
  top: "pool5_p"
  pooling_param {
    pool: MAX
    kernel_size:2
    stride:2
  }
}

# ----- 1st fc group -----
layer {
  name: "fc6_p"
  type: "InnerProduct"
  bottom: "pool5_p"
  top: "fc6_p"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6_p"
  type: "ReLU"
  bottom: "fc6_p"
  top: "fc6_p"
}
layer {
  name: "drop6_p"
  type: "Dropout"
  bottom: "fc6_p"
  top: "fc6_p"
  dropout_param {
    dropout_ratio: 0.5
  }
}




layer {
  name: "loss"
  type: "ContrastiveLoss"
  bottom: "fc6"
  bottom: "fc6_p"
  bottom: "sim"
  top: "loss"
  contrastive_loss_param {
    margin: 1
  }
}

